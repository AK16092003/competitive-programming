<snippet>
	<content><![CDATA[

class stackop
{
	public:
		stack <ll> s1,s1g,s2,s2g;
		
		ll operation(ll x , ll y)
		{
			return min(x , y);
		}

		void add(ll x)
		{
			s2.push(x);
			if(s2.size() == 1)
				s2g.push(x);
			else
				s2g.push(operation(x , s2g.top()));

			if(s1.size() == 0)
			{
				while(s2.size() > 0)
				{
					s1.push(s2.top());
					s2.pop();
					s2g.pop();
					if(s1g.size() == 0) s1g.push(s1.top());
					else               s1g.push(operation(s1.top() , s1g.top()));
				}
			}
		}

		ll fake_remove()
		{
			ll g = 0;

			if(s1.size() == 1)
			{
				if(s2g.size())
					g = s2g.top();
			}
			else
			{
				ll t = s1g.top();
				s1g.pop();
				if(s2g.size())
					g = operation(s2g.top() , s1g.top());
				else
					g = s1g.top();
				s1g.push(t);
			}
			return g;
		}

		ll curval()
		{
			if(s1.size() == 0 && s2.size())
			{
				return s2g.top();
			}
			if(s2.size() == 0 && s1.size())
			{
				return s1g.top();
			}
			return operation(s2g.top() , s1g.top());
		}

		void remove()
		{
			if(s1.size() == 0)
			{
				while(s2.size() > 0)
				{
					s1.push(s2.top());
					s2.pop();
					s2g.pop();
					if(s1g.size() == 0) s1g.push(s1.top());
					else               s1g.push(operation(s1.top() , s1g.top()));
				}
			}
			s1.pop();
			s1g.pop();
			if(s1.size() == 0)
			{
				while(s2.size() > 0)
				{

					s1.push(s2.top());
					s2.pop();
					s2g.pop();
					if(s1g.size() == 0) s1g.push(s1.top());
					else               s1g.push(operation(s1.top() , s1g.top()));
				}
			}

		}
};
]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>2stack</tabTrigger>
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<!-- <scope>source.python</scope> -->
</snippet>
