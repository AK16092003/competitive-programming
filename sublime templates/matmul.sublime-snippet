<snippet>
	<content><![CDATA[

#define sz 10
struct mat
{
	ll mat[sz][sz];
};

struct mat basemat;
struct mat idenmat;
struct mat zeromat;

void construct()
{
	for(int i =0 ; i < sz ; i ++) for(int j = 0; j < sz ; j ++) basemat.mat[i][j] = 0;

	for(int i = 1 ; i <= sz ; i ++)
	{
		for(int j = 1 ; j <= sz ; j ++)
		{
			basemat.mat[i-1][j-1] = reached(i , j);
		}
	}
	for(int i =0 ; i < sz ; i ++) for(int j = 0; j < sz ; j ++) idenmat.mat[i][j] = (i == j);
	for(int i =0 ; i < sz ; i ++) for(int j = 0; j < sz ; j ++) zeromat.mat[i][j] = 0;

}

void printmat(struct mat a)
{
	for(int i = 0;  i < sz ; i ++)
	{
		for(int j = 0 ;j < sz ; j ++)
		{
			cout << a.mat[i][j] << " ";
		}
		cout << endl;
	}
}


ll mod = 1e9 + 7;

struct mat mul(struct mat a , struct mat b)
{
	struct mat c;
	for(int i = 0 ; i < sz ; i ++)
	{
		for(int j = 0 ; j < sz ; j ++)
		{
			c.mat[i][j] = 0;
			for(int k = 0 ; k < sz ; k ++)
			{
				c.mat[i][j] += (a.mat[i][k]*b.mat[k][j])%mod;
				if(c.mat[i][j] >= mod) c.mat[i][j] -= mod;
			}
		}
	}
	return c;
}

struct mat power(struct mat x, ll n)   //x base n exponent
{
	if(n<0) return zeromat;
    if(n==0) return idenmat;
    struct mat pow = idenmat;
    while(n)
    {
        if (n & 1)
            pow = mul(pow,x);
        n = n >> 1;
        x = mul(x,x);
    }
    return pow;
}

]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>matmul</tabTrigger>
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<!-- <scope>source.python</scope> -->
</snippet>
