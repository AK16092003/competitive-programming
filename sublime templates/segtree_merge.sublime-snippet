<snippet>
	<content><![CDATA[


struct node
{
	ll val;
};

struct segtree
{
	int size;
	vector<struct node> values;
	// initial here
	struct node empty_node = {0};

	void init(int n)
	{
		size = 1;
		while(size < n) size*=2;
		values.assign(2*size , empty_node);
	}

	struct node merge(struct node p1 , struct node p2)
	{
		struct node merge_node;
		// operation here

		return merge_node;
	}

	void set(int i , ll v , int x , int  lx , int rx)
	{
		if(rx  - lx == 1)
		{
			values[x].val = v;
			return;
		}

		int m = (lx + rx)/2;
		if( i < m)
		{
			set(i , v , 2*x + 1 , lx , m);
		}
		else
		{
			set(i , v , 2*x + 2 , m , rx);
		}

		values[x] = merge(values[2*x+1] , values[2*x+2]);
	}

	void set(int i , ll v)
	{
		set(i , v, 0 , 0 , size);
	}

	struct node range_calc(int l , int r , int x , int lx , int rx)
	{
		if(lx >= r || l >= rx) return empty_node;
		if(l <= lx && r >= rx) return values[x];
		int m = (lx + rx)/2;

		struct node s1 = range_calc(l , r , 2*x+1 , lx , m);
		struct node s2 = range_calc(l , r , 2*x+2 , m , rx);
		
		return merge(s1 , s2);
	}
	ll range_calc(int l , int r)
	{
		return range_calc(l , r , 0 , 0 , size).val;
	}


	vl combine(vl a , vl b)
	{
		while(b.size())
		{
			a.pb(b[b.size()-1]);
			b.pop_back();
		}
		return a;
	}
 
	vl find_all_index(int l , int r , ll v , int x , int lx , int rx)
	{
		if(lx >= r || l >= rx) return {};
		
		int m = (lx + rx)/2;
		if(values[x].val < v)
		{
			return {};
		}
 
		if(rx - lx == 1)
		{
			return {lx};
		}
 
		return combine(find_all_index(l , r , v ,  2*x+1 , lx , m) , find_all_index(l , r , v , 2*x+2 , m , rx));
	}
 
	vl find_all_index(int l , int r , ll v)
	{
		return find_all_index(l , r ,  v , 0 , 0 , size);
	}
 	

	int find_first_index(int l , int r , ll v , int x , int lx , int rx)
	{
		if(lx >= r || l >= rx) return -1;
		
		int m = (lx + rx)/2;

		if(rx - lx == 1)
		{
			if(values[x].val >= v) return lx;
			return -1;
		}

		if(l <= lx && r >= rx)
		{
			if(values[2*x+1].val >= v)
			{
				return find_first_index(l , r , v ,  2*x+1 , lx , m);
			}
			else if(values[2*x+2].val >= v)
			{
				return find_first_index(l , r , v ,  2*x+2 , m , rx);
			}
			else
			{
				return -1;
			}
		}
 
		int ans1  = find_first_index(l , r , v ,  2*x+1 , lx , m);
		if(ans1 != -1) return ans1;	
		
		return find_first_index(l , r , v , 2*x+2 , m , rx);
	}
 
	int find_first_index(int l , int r , ll v)
	{
		return find_first_index(l , r ,  v , 0 , 0 , size);
	}


};

]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>segtree_merge</tabTrigger>
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<!-- <scope>source.python</scope> -->
</snippet>
