<snippet>
	<content><![CDATA[

struct node
{
	int open;
	int close;
	int maxi;
};

struct segtree
{
	int size;
	vector<struct node> values;
	struct node empty_node = {0,0,0};

	void init(int n)
	{
		size = 1;
		while(size < n) size*=2;
		values.assign(2*size , {0,0,0});
	}

	struct node merge(struct node p1 , struct node p2)
	{
		struct node merge_node;
		int t = min(p1.open , p2.close);
		merge_node.maxi = p1.maxi + p2.maxi + t + t;
		merge_node.open = p1.open + p2.open - t;
		merge_node.close = p1.close + p2.close - t;
		return merge_node;
	}

	void set(int i , lli v , int x , int  lx , int rx)
	{
		if(rx  - lx == 1)
		{
			values[x].open = v;
			values[x].close = 1^v;
			values[x].maxi = 0;
			return;
		}

		int m = (lx + rx)/2;
		if( i < m)
		{
			set(i , v , 2*x + 1 , lx , m);
		}
		else
		{
			set(i , v , 2*x + 2 , m , rx);
		}

		values[x] = merge(values[2*x+1] , values[2*x+2]);
	}

	void set(int i , lli v)
	{
		set(i , v, 0 , 0 , size);
	}

	struct node max_seg(int l , int r , int x , int lx , int rx)
	{
		if(lx >= r || l >= rx) return empty_node;
		if(l <= lx && r >= rx) return values[x];
		int m = (lx + rx)/2;

		struct node s1 = max_seg(l , r , 2*x+1 , lx , m);
		struct node s2 = max_seg(l , r , 2*x+2 , m , rx);
		
		return merge(s1 , s2);
	}
	lli max_seg(int l , int r)
	{
		return max_seg(l , r , 0 , 0 , size).maxi;
	}
};

]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>segtree_merge</tabTrigger>
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<!-- <scope>source.python</scope> -->
</snippet>
